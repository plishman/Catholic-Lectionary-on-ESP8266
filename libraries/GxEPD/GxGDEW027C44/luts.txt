//////////////////////////////////
/// composite (no invert/clear) 3 shades + white (2bpp)
const uint8_t GxGDEW027C44::lut_vcom_dc_comp[] =
{
0x00, 0x00,
0x00, 0x1A, 0x1A, 0x00, 0x00, 0x00,        
0x00, 0x08, 0x08, 0x00, 0x00, 0x01,        
0x00, 0x0E, 0x01, 0x0E, 0x01, 0x00,        
0x00, 0x0A, 0x0A, 0x00, 0x00, 0x00,        
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,        
0x00, 0x03, 0x0E, 0x00, 0x00, 0x05,        
0x00, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R21H
const uint8_t GxGDEW027C44::lut_ww_comp[] =
{
0x90, 0x1A, 0x1A, 0x00, 0x00, 0x00,
0x40, 0x08, 0x08, 0x00, 0x00, 0x01,
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x80, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x03, 0x0E, 0x00, 0x00, 0x05,
0x00, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R22H    r
const uint8_t GxGDEW027C44::lut_bw_comp[] =
{
0xA0, 0x1A, 0x1A, 0x00, 0x00, 0x00,
0x00, 0x08, 0x08, 0x00, 0x00, 0x01,
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x90, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0xB0, 0x04, 0x10, 0x00, 0x00, 0x00,
0xB0, 0x03, 0x0E, 0x00, 0x00, 0x05,
0xC0, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R23H    w
const uint8_t GxGDEW027C44::lut_bb_comp[] =
{
0x90, 0x1A, 0x1A, 0x00, 0x00, 0x00,
0x40, 0x08, 0x08, 0x00, 0x00, 0x01,
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x80, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x03, 0x0E, 0x00, 0x00, 0x05,
0x00, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R24H    b
const uint8_t GxGDEW027C44::lut_wb_comp[] =
{
0x90, 0x1A, 0x1A, 0x00, 0x00, 0x00, // applies the image in inverse (0x01). At this point, red is shown as black. As an alternative to this, the screen is cleared separately, before any drawing takes place
0x20, 0x08, 0x08, 0x00, 0x00, 0x01, // shows the image in non-inverse (0x08). At this point, red and black are only faintly visible (as whiter-than-white) 0x20, 0x0A, 0x0A, 0x00, 0x00, 0x01
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x10, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x03, 0x0E, 0x00, 0x00, 0x05, // does the red (0x0A). With line 2 set to 0x08 (and all the rest 0x00), get pink from red areas
0x00, 0x01, 0x00, 0x00, 0x00, 0x01	// 0x00 0x23 0x00 0x00 0x00 0x01
};




////////////////////////////////////////


//////////////////////////////////
/// composite (no invert/clear) 3 shades + white (2bpp)
const uint8_t GxGDEW027C44::lut_vcom_dc_comp[] =
{
0x00, 0x00,
0x00, 0x1A, 0x1A, 0x00, 0x00, 0x01,        //0x00 0x1A 0x1A 0x00 0x00 0x00
0x00, 0x01, 0x01, 0x00, 0x00, 0x04,        
0x00, 0x0E, 0x01, 0x0E, 0x01, 0x01,        //0x0E 0x01 0x0E 0x01
0x00, 0x0A, 0x0A, 0x00, 0x00, 0x01,        
0x00, 0x04, 0x10, 0x00, 0x00, 0x01,        
0x00, 0x02, 0x0D, 0x00, 0x00, 0x02,        
0x00, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R21H
const uint8_t GxGDEW027C44::lut_ww_comp[] =
{
0x90, 0x1A, 0x1A, 0x00, 0x00, 0x00,
0x40, 0x01, 0x01, 0x00, 0x00, 0x04,
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x80, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x02, 0x0D, 0x00, 0x00, 0x02,
0x00, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R22H    r
const uint8_t GxGDEW027C44::lut_bw_comp[] =
{
0xA0, 0x1A, 0x1A, 0x00, 0x00, 0x00,
0x00, 0x01, 0x01, 0x00, 0x00, 0x04,
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x90, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0xB0, 0x04, 0x10, 0x00, 0x00, 0x00,
0xB0, 0x02, 0x0D, 0x00, 0x00, 0x02,
0xC0, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R23H    w
const uint8_t GxGDEW027C44::lut_bb_comp[] =
{
0x90, 0x1A, 0x1A, 0x00, 0x00, 0x00,
0x40, 0x01, 0x01, 0x00, 0x00, 0x04,
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x80, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x02, 0x0D, 0x00, 0x00, 0x02,
0x00, 0x01, 0x00, 0x00, 0x00, 0x01
};

//R24H    b
const uint8_t GxGDEW027C44::lut_wb_comp[] =
{
0x90, 0x1A, 0x1A, 0x00, 0x00, 0x00, // applies the image in inverse (0x01). At this point, red is shown as black. As an alternative to this, the screen is cleared separately, before any drawing takes place
0x20, 0x01, 0x01, 0x00, 0x00, 0x04, // 0x04 shows the image in non-inverse (0x08). At this point, red and black are only faintly visible (as whiter-than-white) 0x20, 0x0A, 0x0A, 0x00, 0x00, 0x01
0x84, 0x0E, 0x01, 0x0E, 0x01, 0x00,
0x10, 0x0A, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x02, 0x0D, 0x00, 0x00, 0x02, // 0x02 does the red (0x0A). With line 2 set to 0x08 (and all the rest 0x00), get pink from red areas
0x00, 0x01, 0x00, 0x00, 0x00, 0x01	// turns reds into browns (adds black) 0x00 0x23 0x00 0x00 0x00 0x01 // 0x00 0x01 0x00 0x00 0x00 0x01
};
